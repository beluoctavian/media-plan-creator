<?php

define('TOTAL_NET_BUDGET_COL', 'I');
// Replace USD with anything
define('EXCEL_FORMAT_CURRENCY', '#,##0.00 [$USD];-#,##0.00 [$USD]');
define('ZEDDIGITAL_WORKFLOW_PROGRESS_SID', '2');
define('ZEDDIGITAL_WORKFLOW_DONE_SID', '3');

/**
 * Implements hook_menu().
 */
function zeddigital_menu() {
  return array(
    'node/%/delete_programmatically' => array(
      'title' => t('Delete'),
      'page callback' => 'redirect_to_node_delete',
      'access callback' => 'zeddigital_node_delete_access',
      'access arguments' => array(1),
      'callback arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    ),
//    'node/%/export_to_excel' => array(
//      'title' => t('Export to EXCEL'),
//      'page callback' => 'zeddigital_export_node_to_excel',
//      'access callback' => 'zeddigital_node_export_access',
//      'access arguments' => array(1),
//      'callback arguments' => array(1),
//      'type' => MENU_LOCAL_TASK,
//      'weight' => 4,
//    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function zeddigital_libraries_info() {
  return array(
    'PHPExcel' => array(
      'name' => 'PHPExcel',
      'vendor url' => 'http://phpexcel.codeplex.com/',
      'download url' => 'https://github.com/PHPOffice/PHPExcel',
      'version callback' => 'phpexcel_get_library_version',
      'path' => 'Classes',
      'files' => array(
        'php' => array(
          'PHPExcel.php',
        ),
      ),
    ),
  );
}

/**
 * Check if the user can delete the current node.
 */
function zeddigital_node_delete_access() {
  global $user;
  $node = node_load(arg(1));
  return node_access('delete', $node, $user);
}

/**
 * Check if the user can export the current node.
 */
function zeddigital_node_export_access() {
  global $user;
  $node = node_load(arg(1));
  return node_access('view', $node, $user);
}

/**
 * Helper function for menu_local_task.
 */
function redirect_to_node_delete() {
  if (arg(0) == 'node' && arg(1) && is_numeric(arg(1))) {
    drupal_goto('node/' . arg(1) . '/delete');
  }
}

function _zeddigital_excel_set_cell_background(&$sheet, $bgcolor = '000000', $target, $bold = FALSE) {
  $style = array(
    'fill' => array(
      'type' => PHPExcel_Style_Fill::FILL_SOLID,
      'color' => array('rgb' => $bgcolor)
    ),
    'font'  => array(
      'bold'  => $bold,
      'color' => array('rgb' => 'FFFFFF'),
    ),
    'borders' => array(
      'allborders' => array(
        'style' => PHPExcel_Style_Border::BORDER_THIN,
        'color' => ['rgb' => '000000'],
      ),
    ),
  );
  if (is_array($target)) {
    foreach ($target as $t) {
      $sheet->getStyle($t)->applyFromArray($style);
    }
  }
  else {
    $sheet->getStyle($target)->applyFromArray($style);
  }
}

function _zeddigital_excel_center_text(&$sheet, $target) {
  $style = array(
    'alignment' => array(
      'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    ),
  );
  if (is_array($target)) {
    foreach ($target as $t) {
      $sheet->getStyle($t)->applyFromArray($style);
    }
  }
  else {
    $sheet->getStyle($target)->applyFromArray($style);
  }
}

function _zeddigital_excel_set_boder(&$sheet, $target, $borderColor = '000000', $borderStyle = PHPExcel_Style_Border::BORDER_THIN) {
  $style = array(
    'borders' => array(
      'allborders' => array(
        'style' => $borderStyle,
        'color' => ['rgb' => $borderColor],
      ),
    ),
  );
  $sheet->getStyle($target)->applyFromArray($style);
}

function _initialize_excel_writer() {
  libraries_load('PHPExcel');
  $objPHPExcel = new PHPExcel();
  $objPHPExcel->setActiveSheetIndex(0);
  $activeSheet = $objPHPExcel->getActiveSheet();
  $style = array(
    'alignment' => array(
      'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
    ),
    'fill' => array(
      'type' => PHPExcel_Style_Fill::FILL_SOLID,
      'color' => array('rgb' => 'FFFFFF')
    ),
    'font' => array(
      'size' => '10px',
    ),
  );
  $activeSheet->getStyle('A1:AZ200')->applyFromArray($style);

  // Set columns width
  foreach(range('A','Z') as $columnID) {
    $activeSheet->getColumnDimension($columnID)->setAutoSize(true);
  }

  // Set rows height
  foreach(range(0, 300) as $rowID) {
    $activeSheet->getRowDimension($rowID)->setRowHeight(25);
  }

  $style = array(
    'font'  => array(
      'bold'  => false,
      'color' => array('rgb' => '000000'),
      'size'  => '7px',
  ));
  $activeSheet->getStyle('A1:A200')->applyFromArray($style);

  return $objPHPExcel;
}

function _zeddigital_save_excel($objPHPExcel, $data, $node_wrapper) {
  $activeSheet = $objPHPExcel->getActiveSheet();

  // Store the file in sites/default/files
  $dir = file_stream_wrapper_get_instance_by_uri('public://')->realpath();
  $filename = 'media_plan_' . $node_wrapper->label() . '.xls';
  $path = "{$dir}/media_plans/excel_export/{$filename}";
  $tmp_path = "{$dir}/media_plans/excel_export/tmp/{$filename}";

  $max_row = 0;

  foreach ($data as $col => $values) {
    foreach ($values as $row => $val) {
      $max_row = $row > $max_row ? $row : $max_row;
      $activeSheet->SetCellValue($col.$row, $val);
    }
  }

  if(file_exists($path)) {
    unlink($path);
  }
  $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
  $objWriter->setPreCalculateFormulas(true);
  $objWriter->save($path);
  $old_drupal_file = $node_wrapper->field_excel_file->value();
  if (empty($old_drupal_file)) {
    // Only God and I know why this needs to be done
    rename($path, $tmp_path);
    $file = (object) [
      'uid' => 1,
      'uri' => $tmp_path,
      'status' => 1,
      'display' => 1,
      'filename' => 'media_plan_' . $node_wrapper->label() . '.xls',
      'filemime' => file_get_mimetype($tmp_path),
    ];
    $drupal_file = file_move($file, 'public://media_plans/excel_export/', FILE_EXISTS_REPLACE);
    $node_wrapper->field_excel_file->set((array)$drupal_file);
    $node_wrapper->save();
  }
}

function _zeddigital_set_excel_logo(&$sheet) {
  $objDrawing = new PHPExcel_Worksheet_Drawing();
  $objDrawing->setName('Logo');
  $objDrawing->setDescription('Logo');
  $logo = drupal_get_path('theme', 'zeddigital_theme') . '/zeddigital_images/logo.png';
  $objDrawing->setPath($logo);
  $objDrawing->setCoordinates('H3');
  $objDrawing->setHeight(75); // logo height
  $objDrawing->setWorksheet($sheet);
}

function _zeddigital_set_excel_header_data(&$sheet, array &$data, $node_wrapper) {
  $data['B'][1] = 'ONLINE CAMPAIGN';
  $start_row = $row = 3;
  $first_col = 'B';
  $second_col = 'C';
  $data[$first_col][$row] = 'Client:';
  $data[$second_col][$row++] = $node_wrapper->field_client->value();
  $data[$first_col][$row] = 'Brand:';
  $data[$second_col][$row++] = $node_wrapper->field_brand->label();
  $data[$first_col][$row] = 'Campaign:';
  $data[$second_col][$row++] = $node_wrapper->field_campaign->value();
  $data[$first_col][$row] = 'Media Target Audience:';
  $data[$second_col][$row++] = $node_wrapper->field_media_target_audience->label();
  $data[$first_col][$row] = 'Period';
  if (!empty($node_wrapper->field_period->value())){
    $start_date = isset($node_wrapper->field_period) ? gmdate('d M Y', $node_wrapper->field_period->value->value()) : '';
    $end_date = isset($node_wrapper->field_period) ? gmdate(' - d M Y', $node_wrapper->field_period->value2->value()) : '';
    $data[$second_col][$row] = $start_date . $end_date;
  }
  _zeddigital_excel_set_boder($sheet, "{$first_col}{$start_row}:{$second_col}{$row}");
  _zeddigital_set_excel_logo($sheet);
  return 11;
}

function _zeddigital_excel_set_category_header(&$sheet, array &$data, &$row_num, $category) {
  $category_title = $category->field_category_title->label();
  $data['B'][$row_num] = $category_title;
  _zeddigital_excel_set_cell_background($sheet, '000000', "B{$row_num}:I{$row_num}", TRUE);
  $row_num++;
  $data['B'][$row_num] = 'Site';
  $data['C'][$row_num] = 'Supplier';
  $data['D'][$row_num] = 'Site category';
  $data['E'][$row_num] = 'Ad Format';
  $data['F'][$row_num] = 'Campaign type';
  $data['G'][$row_num] = 'Bought Adviews';
  $data['H'][$row_num] = 'Net Cost-Per-Thou (CPM)';
  $data[TOTAL_NET_BUDGET_COL][$row_num] = 'Total net budget';
  _zeddigital_excel_set_cell_background($sheet, '006600', "B{$row_num}:I{$row_num}", FALSE);
  $row_num++;
}

function _zeddigital_excel_append_site(&$sheet, array &$data, &$row_num, $website) {
  $site_name = $website->field_site->label();
  $supplier = $website->field_supplier->label();
  $site_category = $website->field_category->label();
  $ad_format = $website->field_ad_format->label();
  $campaign_type = $website->field_campaign_type->label();
  $bought_adviews = $website->field_bought_adviews->value();
  $cpm = $website->field_cpm->value();
  $total_net_budget = $website->field_total_net_budget->value();
  $data['A'][$row_num] .= "_{$row_num}";
  $data['B'][$row_num] = $site_name;
  $data['C'][$row_num] = $supplier;
  $data['D'][$row_num] = $site_category;
  $data['E'][$row_num] = $ad_format;
  $data['F'][$row_num] = $campaign_type;
  $data['G'][$row_num] = $bought_adviews;
  $data['H'][$row_num] = $cpm;
  $data[TOTAL_NET_BUDGET_COL][$row_num] = $total_net_budget;
  _zeddigital_excel_set_boder($sheet, "B{$row_num}:I{$row_num}");
  $row_num++;
}

function _zeddigital_excel_budget_summary(&$sheet, &$data, array $budget_cells, array $commission_charged_cells, &$row_num, $node_wrapper) {
  $first_currency = $node_wrapper->field_first_currency->label();
  $second_currency = $node_wrapper->field_second_currency->label();
  $exchange_rate = $node_wrapper->field_exchange_rate->value();
  $agency_commission = $node_wrapper->field_agency_commission->value();
  $vat = $node_wrapper->field_vat->value();
  $fees = $node_wrapper->field_platforms_management_fees->value();
  $row_num++;
  $sheet->mergeCells("B{$row_num}:E{$row_num}");
  $data['B'][$row_num] = 'BUDGET SUMMARY';
  _zeddigital_excel_set_cell_background($sheet, '006600', "B{$row_num}:E{$row_num}", TRUE);
  _zeddigital_excel_center_text($sheet, "B{$row_num}");

  $row_num += 2;
  $start_row = $row_num;

  $data['B'][$row_num] = 'Net Media Budget';
  $data['D'][$row_num] = '=' . implode('+', $budget_cells);
  $data['E'][$row_num] = "=D{$row_num}/{$exchange_rate}";
  $row_num++;

  $commission = implode('+', $commission_charged_cells);
  $data['B'][$row_num] = 'Agency commission';
  $data['D'][$row_num] = "=({$commission}) * {$agency_commission}";
  $data['E'][$row_num] = "=D{$row_num}/{$exchange_rate}";
  $row_num++;

  $data['B'][$row_num] = 'Platforms management Fees';
  $data['D'][$row_num] = $fees;
  $data['E'][$row_num] = "=D{$row_num}/{$exchange_rate}";
  $row_num++;

  $data['B'][$row_num] = 'TOTAL NET CLIENT COST';
  $data['D'][$row_num] = "=SUM(D{$start_row}:D" . ($row_num-1) . ")";
  $data['E'][$row_num] = "=D{$row_num}/{$exchange_rate}";
  $row_num++;

  $data['B'][$row_num] = 'VAT';
  $data['D'][$row_num] = "=D" . ($row_num-1) . " * {$vat}";
  $data['E'][$row_num] = "=D{$row_num}/{$exchange_rate}";
  $row_num++;

  $data['B'][$row_num] = 'TOTAL BUDGET (INCLUDING VAT)';
  $data['D'][$row_num] = "=D" . ($row_num-2) . " + " . ($row_num-1);
  $data['E'][$row_num] = "=D{$row_num}/{$exchange_rate}";

  $sheet->getStyle("D{$start_row}:D{$row_num}")->getNumberFormat()->setFormatCode(str_replace('USD', $first_currency, EXCEL_FORMAT_CURRENCY));
  $sheet->getStyle("E{$start_row}:E{$row_num}")->getNumberFormat()->setFormatCode(str_replace('USD', $second_currency, EXCEL_FORMAT_CURRENCY));
  _zeddigital_excel_set_cell_background($sheet, '006600', "B" . ($row_num-2) . ":E{$row_num}", FALSE);
  _zeddigital_excel_set_boder($sheet, "B{$start_row}:E{$row_num}");
}

/**
 * Export node to EXCEL.
 */
function zeddigital_export_node_to_excel($node = NULL) {
  if ($node == NULL) {
    if (!(arg(0) == 'node' && arg(1) && is_numeric(arg(1)))){
      return;
    }
    $node = node_load(arg(1));
  }
  $data = [];
  $net_budget_cells = [];
  $commission_charged_cells = [];
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $objPHPExcel = _initialize_excel_writer();
  $sheet = $objPHPExcel->getActiveSheet();
  $row_num = _zeddigital_set_excel_header_data($sheet, $data, $node_wrapper);
  $first_currency = $node_wrapper->field_first_currency->label();

  foreach ($node_wrapper->field_categories as $category) {
    $commission_is_charged = $category->field_commission_is_charged->value();
    _zeddigital_excel_set_category_header($sheet, $data, $row_num, $category);
    $first_row = $row_num;
    foreach ($category->field_websites as $website) {
      $data['A'][$row_num] = "#{$node_wrapper->label()}";
      _zeddigital_excel_append_site($sheet, $data, $row_num, $website);
    }
    $last_row = $row_num - 1;
    $data['G'][$row_num] = "=SUM(G{$first_row}:G{$last_row})";
    $data[TOTAL_NET_BUDGET_COL][$row_num] = "=SUM(I{$first_row}:I{$last_row})";
    $net_budget_cells[] = TOTAL_NET_BUDGET_COL . $row_num;
    if ($commission_is_charged) {
      $commission_charged_cells[] = TOTAL_NET_BUDGET_COL . $row_num;
    }
    $sheet->getStyle("I{$first_row}:I{$row_num}")->getNumberFormat()->setFormatCode(str_replace('USD', $first_currency, EXCEL_FORMAT_CURRENCY));
    _zeddigital_excel_set_cell_background($sheet, '006600', ["I{$row_num}", "G{$row_num}"], FALSE);
    $row_num += 2;
  }
  _zeddigital_excel_budget_summary($sheet, $data, $net_budget_cells, $commission_charged_cells, $row_num, $node_wrapper);
  _zeddigital_save_excel($objPHPExcel, $data, $node_wrapper);
  drupal_goto('node/' . $node->nid);
}

/**
 * Implements hook_form_alter().
 */
function zeddigital_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'media_plan_node_form':
      unset($form['title']);
      unset($form['field_excel_file']);
      break;
  }
}

/**
 * Implements hook_node_insert().
 */
function zeddigital_node_insert($node) {
  if ($node->type == 'media_plan') {
    $title = $node->nid;
    $title .= '_' . $node->field_brand[LANGUAGE_NONE][0]['name'];
    $title = str_replace(' ', '-', $title);
    db_update('node')
      ->fields(array('title' => $title,))
      ->condition('nid', $node->nid)
      ->execute();
    db_update('node_revision')
      ->fields(array('title' => $title,))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function zeddigital_field_widget_form_alter(&$element, &$form_state, $context) {
  // TO DO: AJAX AUTOCOMPLETE
  if (!empty($element['#bundle']) && $element['#bundle'] == 'field_websites' && $element['#field_name'] == 'field_websites') {
    $field_bouglt_adviews = &$element['field_bought_adviews'];
    $field_cpm = &$element['field_cpm'];
    $field_total_net_budget = &$element['field_total_net_budget'];

    $field_bouglt_adviews['#attributes']['delta_website'] = array($context['delta']);
    $field_cpm['#attributes']['delta_website'] = array($context['delta']);
    $field_total_net_budget['#attributes']['delta_website'] = array($context['delta']);
    $field_total_net_budget['#attributes']['disabled'] = array('disabled');
  }
}

/**
 * Implements hook_node_update().
 */
function zeddigital_node_update($node) {
  if ($node->type == 'media_plan') {
    try {
      zeddigital_export_node_to_excel($node);
    }
    catch (Exception $e) {
      watchdog_exception('excel_explort', $e);
//      drupal_set_message('An error occured when exporting the excel file.', 'error');
    }
  }
}

/**
 * Implements hook_node_view().
 */
function zeddigital_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'media_plan' && empty($node->field_excel_file)) {
    try {
      zeddigital_export_node_to_excel($node);
    }
    catch (Exception $e) {
      watchdog_exception('excel_explort', $e);
//      drupal_set_message('An error occured when exporting the excel file.', 'error');
    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function zeddigital_taxonomy_term_insert($term) {
  $suppliers_voc = taxonomy_vocabulary_machine_name_load('suppliers');
  if ($term->vid == $suppliers_voc->vid) {
    $supplier_user = user_load_by_name($term->name);
    if (empty($supplier_user)) {
      $roles = user_roles();
      $supplier_rid = array_search('supplier', $roles);
      $username = str_replace(' ', '', $term->name);
      $new_user = array(
        'name' => $username,
        'pass' => md5('password'),
        'mail' => $username . '@example.com',
        'status' => 1,
        'roles' => array(
          DRUPAL_AUTHENTICATED_RID => 'authenticated user',
          $supplier_rid => 'supplier',
        ),
      );

      // The first parameter is sent blank so a new user is created.
      user_save(NULL, $new_user);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function zeddigital_views_query_alter(&$view, &$query) {
  global $user;
  if ($view->name == 'media_plans' && in_array('supplier', $user->roles)) {
    foreach ($query->where[1]['conditions'] as &$condition) {
      if ($condition['field'] == 'field_data_field_linked_suppliers_users.field_linked_suppliers_users_value') {
        $condition['value'] = $user->uid;
        $condition['operator'] = '=';
      }
    }
  }
}

function computed_field_field_linked_suppliers_users_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field = [];
  $node_wrapper = entity_metadata_wrapper('node', $entity);
  $suppliers = [];
  foreach ($node_wrapper->field_categories as $category){
    foreach ($category->field_websites as $website) {
      if (!empty($website->field_supplier->value())) {
        $suppliers[] = $website->field_supplier->value()->name;
      }
    }
  }
  $suppliers = array_unique($suppliers);
  if (!empty($suppliers)) {
    $q = db_select('users','u')
      ->fields('u', ['uid'])
      ->condition('name', $suppliers, 'IN');
    $uids = $q->execute()->fetchCol();
    foreach ($uids as $key => $u) {
      $entity_field[$key] = ['value' => $u];
    }
  }
}

/**
 * Implements hook_workflow().
 */
function zeddigital_workflow($op, $id, $new_sid, $entity, $force, $entity_type = '', $field_name = '', $transition = NULL, $user = NULL) {
  if ($op == 'transition post' && !empty($entity) && $entity->type == 'media_plan'
    && $id == ZEDDIGITAL_WORKFLOW_PROGRESS_SID && $new_sid == ZEDDIGITAL_WORKFLOW_DONE_SID) {
    try {
      zeddigital_send_media_plan_to_api($entity);
    }
    catch (Exception $e) {
      watchdog_exception('gde-api', $e);
      drupal_set_message('An error occured. The media plan was not registered.', 'error');
    }
  }
}

/**
 * Register the media plan with
 *
 * @param $entity
 */
function zeddigital_send_media_plan_to_api($entity) {
  $apiController = new GdeApiController($entity);
  if ($apiController->createCampaign() == TRUE) {
    drupal_set_message('The media plan was succesfully registered!', 'status');
  }
}

class GdeApiController {

  const STATUS_OK = 'OK';

  private $api_url;
  private $username;
  private $password;
  private $sessionID = NULL;

  private $nodeWrapper;

  public function __construct($entity) {
    $this->api_url = 'http://gdeapi.gemius.com';
    $this->username = 'zenith_test_ro';
    $this->password = 'mBo$$555';
    $this->nodeWrapper = entity_metadata_wrapper('node', $entity);
    $this->openSession();
  }

  public function __destruct() {
    $this->closeSession();
  }

  public function getUserInfo() {
    $info = [
      'userID' => '',
      'countryID' => '239',
      'timeZoneID' => '295',
    ];
    $get_user_info_url = "{$this->api_url}/GetUserInfo.php?sessionID={$this->sessionID}";
    $xml = simplexml_load_file($get_user_info_url);
    if ($xml->status == self::STATUS_OK) {
      $user_info = $xml->users->user;
      foreach ($user_info as $element) {
        foreach($element as $key => $value) {
          $info[$key] = (string)$value;
        }
      }
    }
    return $info;
  }

  private function openSession() {
    $login_url = "{$this->api_url}/OpenSession.php?login={$this->username}&passwd={$this->password}";
    $xml = simplexml_load_file($login_url);
    if ($xml->status == self::STATUS_OK) {
      $this->sessionID = $xml->sessionID;
      drupal_set_message("Session opened: {$this->sessionID}", 'status');
      return TRUE;
    }
    return FALSE;
  }

  private function ping() {
    $ping_url = "{$this->api_url}/Ping.php?sessionID={$this->sessionID}";
    $xml = simplexml_load_file($ping_url);
    return $xml->status == self::STATUS_OK;
  }

  private function closeSession() {
    if ($this->sessionID === NULL) {
      return FALSE;
    }
    $logout_url = "{$this->api_url}/CloseSession.php?sessionID={$this->sessionID}";
    $xml = simplexml_load_file($logout_url);
    if ($xml->status == self::STATUS_OK) {
      drupal_set_message("Session destroyed: {$this->sessionID}", 'status');
      $this->sessionID = NULL;
      return TRUE;
    }
    return FALSE;
  }

  public function addParamsToUrl($url, array $params) {
    foreach ($params as $key => $value) {
      $url .= "&{$key}={$value}";
    }
    return $url;
  }

  public function createCampaign() {
    $brand = $this->nodeWrapper->field_brand->value();
    $clientID = $brand->field_client_id;
    if (empty($clientID)) {
      drupal_set_message("The client id for '{$brand->name}' brand was not set. Please contact an administrator.", 'error');
      return FALSE;
    }
    else {
      $clientID = $clientID[LANGUAGE_NONE][0]['value'];
    }
    if (!$this->ping()) {
      return FALSE;
    }
    $create_campaign_url = "{$this->api_url}/AddCampaign.php?sessionID={$this->sessionID}";
    $campaign_name = $this->nodeWrapper->label();
    $start_date = $end_date = '';
    if (!empty($this->nodeWrapper->field_period->value())){
      $start_date = isset($this->nodeWrapper->field_period) ? $this->nodeWrapper->field_period->value->value() : '';
      $end_date = isset($this->nodeWrapper->field_period) ? $this->nodeWrapper->field_period->value2->value() : '';
    }
    $user_info = $this->getUserInfo();
    $params = [
      'clientID' => $clientID,
      'name' => $campaign_name,
      'startTS' => $start_date,
      'endTS' => $end_date,
      'costCurrency' => 'RON',
      'countryID' => $user_info['countryID'],
      'timeZoneID' => $user_info['timeZoneID'],
    ];
    $create_campaign_url = $this->addParamsToUrl($create_campaign_url, $params);

    $xml = simplexml_load_file($create_campaign_url);
    if ($xml->status != self::STATUS_OK) {
      drupal_set_message("Error creating the campaign in GDE api: {$xml->status}", 'error');
      return FALSE;
    }

    //Campaign created succesfully.
    return TRUE;
  }

}
